{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOiApDAf8SaGJJpTjAdR43W",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "41f5aa82d3834e58bc1bc758c458c9c4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_648baa5e036b4f2593ff69f7e8e50191",
              "IPY_MODEL_dbba98960ea44e45b084b12527d283ec",
              "IPY_MODEL_064e316fb60647b3b900e22aa49186e5",
              "IPY_MODEL_9c6b770b4ddd400ea86eac1a940604c7",
              "IPY_MODEL_f0817b4fddc041bf9fe0cae185a46c94",
              "IPY_MODEL_fdbb0f01c78443a9bb03446c467f46e9",
              "IPY_MODEL_cc3668885b4d47faabac05253b69a7f8"
            ],
            "layout": "IPY_MODEL_822fc9e5d15942c4994986a9191ab39d"
          }
        },
        "648baa5e036b4f2593ff69f7e8e50191": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8656c3d23e1b48c29a8de3d87a797fcb",
            "placeholder": "‚Äã",
            "style": "IPY_MODEL_35f154377057420bbc3352b3cd463e9a",
            "value": "<h2>üå≥ Visualizador de √Årboles de Expresiones Matem√°ticas</h2>"
          }
        },
        "dbba98960ea44e45b084b12527d283ec": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_03b19c7210e047d891f8ce49cd150e61",
            "placeholder": "‚Äã",
            "style": "IPY_MODEL_1b01dfaf2b124562ba6c26bc4d1df8ff",
            "value": "<p>Ejemplos r√°pidos:</p>"
          }
        },
        "064e316fb60647b3b900e22aa49186e5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_5aec4e4c698946fd93087b5c8d83a968",
              "IPY_MODEL_4fcb5a4b047a4d05b13086d8e9fcd110",
              "IPY_MODEL_328181658531406c8cb05b5fb6890b2a",
              "IPY_MODEL_a58643cf28ec440e9774a76c74c8438b"
            ],
            "layout": "IPY_MODEL_fb1d84b6ab274992a023bf6ba7707833"
          }
        },
        "9c6b770b4ddd400ea86eac1a940604c7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_f6e8e80acb4748388aa3a6445c72ab38",
              "IPY_MODEL_176e04a8ea26418295bf1b9bb72cb21e",
              "IPY_MODEL_a4c071905205464899d7d69b7664db73"
            ],
            "layout": "IPY_MODEL_b325e41855d64cf586b0458009e9584a"
          }
        },
        "f0817b4fddc041bf9fe0cae185a46c94": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b14039d1c49d46b8882914af5b59f494",
            "placeholder": "‚Äã",
            "style": "IPY_MODEL_ae44ff4580224970bcdbe5913a02bf9f",
            "value": "<br><p>O ingresa tu propia expresi√≥n:</p>"
          }
        },
        "fdbb0f01c78443a9bb03446c467f46e9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_2393b02f5c804c7684d406f649156bdd",
              "IPY_MODEL_ef9ffc321dad44d88302746309c82b16",
              "IPY_MODEL_6aa092667fa0405394daf50efe3ef5df"
            ],
            "layout": "IPY_MODEL_3ed3e5db8ddc4f5c9e322f8044fd6b99"
          }
        },
        "cc3668885b4d47faabac05253b69a7f8": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_72249f5efb7940e8822ff31bdfeba134",
            "msg_id": "",
            "outputs": [
              {
                "output_type": "display_data",
                "data": {
                  "text/plain": "<Figure size 1200x800 with 1 Axes>",
                  "image/png": "\n"
                },
                "metadata": {}
              }
            ]
          }
        },
        "822fc9e5d15942c4994986a9191ab39d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8656c3d23e1b48c29a8de3d87a797fcb": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "35f154377057420bbc3352b3cd463e9a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "03b19c7210e047d891f8ce49cd150e61": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1b01dfaf2b124562ba6c26bc4d1df8ff": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5aec4e4c698946fd93087b5c8d83a968": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "",
            "description": "2*x + 3",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_4cc0ec8255d54b82a1fc8c4004d1babc",
            "style": "IPY_MODEL_c7d58a4ec3e94411b567f2316a539b39",
            "tooltip": ""
          }
        },
        "4fcb5a4b047a4d05b13086d8e9fcd110": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "",
            "description": "(a + b) * (c - d)",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_47039d7e03054c218e2abab482d03a4e",
            "style": "IPY_MODEL_023c8f8c70fd4581ab485aae34829c98",
            "tooltip": ""
          }
        },
        "328181658531406c8cb05b5fb6890b2a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "",
            "description": "sin(x) + cos(y)",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_0ee61713acd74408b572220bbabfb49e",
            "style": "IPY_MODEL_fc1ecdd9ceff48ce92980ab1a6eec92b",
            "tooltip": ""
          }
        },
        "a58643cf28ec440e9774a76c74c8438b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "",
            "description": "x**2 + 2*x + 1",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_664f10fc68f5468fbfda0f35447e187c",
            "style": "IPY_MODEL_5ad065b764954b3b8eb165b7da1a0343",
            "tooltip": ""
          }
        },
        "fb1d84b6ab274992a023bf6ba7707833": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f6e8e80acb4748388aa3a6445c72ab38": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "",
            "description": "sqrt(a**2 + b**2)",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_93238da12604486cb18394f9c41a9ddc",
            "style": "IPY_MODEL_95561372b1ed41d4a0c767c09887a903",
            "tooltip": ""
          }
        },
        "176e04a8ea26418295bf1b9bb72cb21e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "",
            "description": "log(x) + exp(y)",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_1aa0bde943464b448eae8341ecc29c0e",
            "style": "IPY_MODEL_a479a15d4b61424c908f2c70758eee53",
            "tooltip": ""
          }
        },
        "a4c071905205464899d7d69b7664db73": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "",
            "description": "(x + 1) / (x - 1)",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_566e3de0ad8c4bffbd64be9b5c63503c",
            "style": "IPY_MODEL_421b9794492a46ec952519bcd668e8b2",
            "tooltip": ""
          }
        },
        "b325e41855d64cf586b0458009e9584a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b14039d1c49d46b8882914af5b59f494": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ae44ff4580224970bcdbe5913a02bf9f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "2393b02f5c804c7684d406f649156bdd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "TextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "TextView",
            "continuous_update": true,
            "description": "Expresi√≥n:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_97afbd0697914c9688f40908aa68d297",
            "placeholder": "Ingresa una expresi√≥n matem√°tica",
            "style": "IPY_MODEL_5086978a7e35403982a0efcc8c7e14e5",
            "value": "2*x + 3"
          }
        },
        "ef9ffc321dad44d88302746309c82b16": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "Matplotlib",
              "Plotly Interactivo"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "Tipo:",
            "description_tooltip": null,
            "disabled": false,
            "index": 0,
            "layout": "IPY_MODEL_944e8345536549a6b3a348eca9e492a9",
            "style": "IPY_MODEL_b07d5a0a0bc34167b7d4b7c3d934b410"
          }
        },
        "6aa092667fa0405394daf50efe3ef5df": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "primary",
            "description": "Visualizar √Årbol",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_599f69a1e1c54c6e975f2702b09c23c1",
            "style": "IPY_MODEL_2663af52c267476aa3b2e47b30125aa3",
            "tooltip": ""
          }
        },
        "3ed3e5db8ddc4f5c9e322f8044fd6b99": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4cc0ec8255d54b82a1fc8c4004d1babc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": "2px",
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "150px"
          }
        },
        "c7d58a4ec3e94411b567f2316a539b39": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "47039d7e03054c218e2abab482d03a4e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": "2px",
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "150px"
          }
        },
        "023c8f8c70fd4581ab485aae34829c98": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "0ee61713acd74408b572220bbabfb49e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": "2px",
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "150px"
          }
        },
        "fc1ecdd9ceff48ce92980ab1a6eec92b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "664f10fc68f5468fbfda0f35447e187c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": "2px",
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "150px"
          }
        },
        "5ad065b764954b3b8eb165b7da1a0343": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "93238da12604486cb18394f9c41a9ddc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": "2px",
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "150px"
          }
        },
        "95561372b1ed41d4a0c767c09887a903": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "1aa0bde943464b448eae8341ecc29c0e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": "2px",
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "150px"
          }
        },
        "a479a15d4b61424c908f2c70758eee53": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "566e3de0ad8c4bffbd64be9b5c63503c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": "2px",
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "150px"
          }
        },
        "421b9794492a46ec952519bcd668e8b2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "97afbd0697914c9688f40908aa68d297": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "400px"
          }
        },
        "5086978a7e35403982a0efcc8c7e14e5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "944e8345536549a6b3a348eca9e492a9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b07d5a0a0bc34167b7d4b7c3d934b410": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "599f69a1e1c54c6e975f2702b09c23c1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "200px"
          }
        },
        "2663af52c267476aa3b2e47b30125aa3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "72249f5efb7940e8822ff31bdfeba134": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/NotStalkingyou/ProyectoGrafos/blob/main/Proyecto\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "41f5aa82d3834e58bc1bc758c458c9c4",
            "648baa5e036b4f2593ff69f7e8e50191",
            "dbba98960ea44e45b084b12527d283ec",
            "064e316fb60647b3b900e22aa49186e5",
            "9c6b770b4ddd400ea86eac1a940604c7",
            "f0817b4fddc041bf9fe0cae185a46c94",
            "fdbb0f01c78443a9bb03446c467f46e9",
            "cc3668885b4d47faabac05253b69a7f8",
            "822fc9e5d15942c4994986a9191ab39d",
            "8656c3d23e1b48c29a8de3d87a797fcb",
            "35f154377057420bbc3352b3cd463e9a",
            "03b19c7210e047d891f8ce49cd150e61",
            "1b01dfaf2b124562ba6c26bc4d1df8ff",
            "5aec4e4c698946fd93087b5c8d83a968",
            "4fcb5a4b047a4d05b13086d8e9fcd110",
            "328181658531406c8cb05b5fb6890b2a",
            "a58643cf28ec440e9774a76c74c8438b",
            "fb1d84b6ab274992a023bf6ba7707833",
            "f6e8e80acb4748388aa3a6445c72ab38",
            "176e04a8ea26418295bf1b9bb72cb21e",
            "a4c071905205464899d7d69b7664db73",
            "b325e41855d64cf586b0458009e9584a",
            "b14039d1c49d46b8882914af5b59f494",
            "ae44ff4580224970bcdbe5913a02bf9f",
            "2393b02f5c804c7684d406f649156bdd",
            "ef9ffc321dad44d88302746309c82b16",
            "6aa092667fa0405394daf50efe3ef5df",
            "3ed3e5db8ddc4f5c9e322f8044fd6b99",
            "4cc0ec8255d54b82a1fc8c4004d1babc",
            "c7d58a4ec3e94411b567f2316a539b39",
            "47039d7e03054c218e2abab482d03a4e",
            "023c8f8c70fd4581ab485aae34829c98",
            "0ee61713acd74408b572220bbabfb49e",
            "fc1ecdd9ceff48ce92980ab1a6eec92b",
            "664f10fc68f5468fbfda0f35447e187c",
            "5ad065b764954b3b8eb165b7da1a0343",
            "93238da12604486cb18394f9c41a9ddc",
            "95561372b1ed41d4a0c767c09887a903",
            "1aa0bde943464b448eae8341ecc29c0e",
            "a479a15d4b61424c908f2c70758eee53",
            "566e3de0ad8c4bffbd64be9b5c63503c",
            "421b9794492a46ec952519bcd668e8b2",
            "97afbd0697914c9688f40908aa68d297",
            "5086978a7e35403982a0efcc8c7e14e5",
            "944e8345536549a6b3a348eca9e492a9",
            "b07d5a0a0bc34167b7d4b7c3d934b410",
            "599f69a1e1c54c6e975f2702b09c23c1",
            "2663af52c267476aa3b2e47b30125aa3",
            "72249f5efb7940e8822ff31bdfeba134"
          ]
        },
        "id": "CwXB11OO5FWP",
        "outputId": "78e80133-0909-4fd7-fc49-d3ce41a9e06a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (3.4.2)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.11/dist-packages (1.13.1)\n",
            "Requirement already satisfied: plotly in /usr/local/lib/python3.11/dist-packages (5.24.1)\n",
            "Requirement already satisfied: ipywidgets in /usr/local/lib/python3.11/dist-packages (7.7.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.58.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
            "Requirement already satisfied: numpy>=1.23 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.0.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.2.1)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.9.0.post0)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy) (1.3.0)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.11/dist-packages (from plotly) (9.1.2)\n",
            "Requirement already satisfied: ipykernel>=4.5.1 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (6.17.1)\n",
            "Requirement already satisfied: ipython-genutils~=0.2.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (0.2.0)\n",
            "Requirement already satisfied: traitlets>=4.3.1 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (5.7.1)\n",
            "Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (3.6.10)\n",
            "Requirement already satisfied: ipython>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (7.34.0)\n",
            "Requirement already satisfied: jupyterlab-widgets>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (3.0.15)\n",
            "Requirement already satisfied: debugpy>=1.0 in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (1.8.0)\n",
            "Requirement already satisfied: jupyter-client>=6.1.12 in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (6.1.12)\n",
            "Requirement already satisfied: matplotlib-inline>=0.1 in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (0.1.7)\n",
            "Requirement already satisfied: nest-asyncio in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (1.6.0)\n",
            "Requirement already satisfied: psutil in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (5.9.5)\n",
            "Requirement already satisfied: pyzmq>=17 in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (24.0.1)\n",
            "Requirement already satisfied: tornado>=6.1 in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (6.4.2)\n",
            "Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (75.2.0)\n",
            "Collecting jedi>=0.16 (from ipython>=4.0.0->ipywidgets)\n",
            "  Downloading jedi-0.19.2-py2.py3-none-any.whl.metadata (22 kB)\n",
            "Requirement already satisfied: decorator in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (4.4.2)\n",
            "Requirement already satisfied: pickleshare in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (0.7.5)\n",
            "Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (3.0.51)\n",
            "Requirement already satisfied: pygments in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (2.19.1)\n",
            "Requirement already satisfied: backcall in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (0.2.0)\n",
            "Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (4.9.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n",
            "Requirement already satisfied: notebook>=4.4.1 in /usr/local/lib/python3.11/dist-packages (from widgetsnbextension~=3.6.0->ipywidgets) (6.5.7)\n",
            "Requirement already satisfied: parso<0.9.0,>=0.8.4 in /usr/local/lib/python3.11/dist-packages (from jedi>=0.16->ipython>=4.0.0->ipywidgets) (0.8.4)\n",
            "Requirement already satisfied: jupyter-core>=4.6.0 in /usr/local/lib/python3.11/dist-packages (from jupyter-client>=6.1.12->ipykernel>=4.5.1->ipywidgets) (5.7.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (3.1.6)\n",
            "Requirement already satisfied: argon2-cffi in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (23.1.0)\n",
            "Requirement already satisfied: nbformat in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (5.10.4)\n",
            "Requirement already satisfied: nbconvert>=5 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (7.16.6)\n",
            "Requirement already satisfied: Send2Trash>=1.8.0 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.8.3)\n",
            "Requirement already satisfied: terminado>=0.8.3 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.18.1)\n",
            "Requirement already satisfied: prometheus-client in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.22.0)\n",
            "Requirement already satisfied: nbclassic>=0.4.7 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.3.1)\n",
            "Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.11/dist-packages (from pexpect>4.3->ipython>=4.0.0->ipywidgets) (0.7.0)\n",
            "Requirement already satisfied: wcwidth in /usr/local/lib/python3.11/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=4.0.0->ipywidgets) (0.2.13)\n",
            "Requirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.11/dist-packages (from jupyter-core>=4.6.0->jupyter-client>=6.1.12->ipykernel>=4.5.1->ipywidgets) (4.3.8)\n",
            "Requirement already satisfied: notebook-shim>=0.2.3 in /usr/local/lib/python3.11/dist-packages (from nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.2.4)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (4.13.4)\n",
            "Requirement already satisfied: bleach!=5.0.0 in /usr/local/lib/python3.11/dist-packages (from bleach[css]!=5.0.0->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (6.2.0)\n",
            "Requirement already satisfied: defusedxml in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.7.1)\n",
            "Requirement already satisfied: jupyterlab-pygments in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.3.0)\n",
            "Requirement already satisfied: markupsafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (3.0.2)\n",
            "Requirement already satisfied: mistune<4,>=2.0.3 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (3.1.3)\n",
            "Requirement already satisfied: nbclient>=0.5.0 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.10.2)\n",
            "Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.5.1)\n",
            "Requirement already satisfied: fastjsonschema>=2.15 in /usr/local/lib/python3.11/dist-packages (from nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (2.21.1)\n",
            "Requirement already satisfied: jsonschema>=2.6 in /usr/local/lib/python3.11/dist-packages (from nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (4.23.0)\n",
            "Requirement already satisfied: argon2-cffi-bindings in /usr/local/lib/python3.11/dist-packages (from argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (21.2.0)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.11/dist-packages (from bleach!=5.0.0->bleach[css]!=5.0.0->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.5.1)\n",
            "Requirement already satisfied: tinycss2<1.5,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from bleach[css]!=5.0.0->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.4.0)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (25.3.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (2025.4.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.36.2)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.25.1)\n",
            "Requirement already satisfied: jupyter-server<3,>=1.8 in /usr/local/lib/python3.11/dist-packages (from notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.16.0)\n",
            "Requirement already satisfied: cffi>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.17.1)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (2.7)\n",
            "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (4.13.2)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.11/dist-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (2.22)\n",
            "Requirement already satisfied: anyio>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (4.9.0)\n",
            "Requirement already satisfied: websocket-client in /usr/local/lib/python3.11/dist-packages (from jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.8.0)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.11/dist-packages (from anyio>=3.1.0->jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (3.10)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio>=3.1.0->jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.3.1)\n",
            "Downloading jedi-0.19.2-py2.py3-none-any.whl (1.6 MB)\n",
            "\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m1.6/1.6 MB\u001b[0m \u001b[31m42.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: jedi\n",
            "Successfully installed jedi-0.19.2\n",
            "\n",
            "üöÄ INSTRUCCIONES DE USO:\n",
            "\n",
            "1. Ejecuta todas las celdas de este notebook\n",
            "2. Usa cualquiera de estas opciones:\n",
            "\n",
            "   # Opci√≥n 1: Interfaz interactiva completa\n",
            "   visualizador = crear_visualizador()\n",
            "   \n",
            "   # Opci√≥n 2: Visualizaci√≥n r√°pida\n",
            "   visualizar_expresion(\"2*x + 3\", tipo='plotly')\n",
            "   \n",
            "   # Opci√≥n 3: Ver ejemplos\n",
            "   ejemplos_de_uso()\n",
            "\n",
            "üìù EXPRESIONES SOPORTADAS:\n",
            "   - Operadores: +, -, *, /, ** (potencia)\n",
            "   - Funciones: sin, cos, tan, log, ln, sqrt, exp\n",
            "   - Variables: x, y, a, b, etc.\n",
            "   - Par√©ntesis para agrupaci√≥n\n",
            "   - N√∫meros enteros y decimales\n",
            "\n",
            "üí° EJEMPLOS:\n",
            "   - 2*x + 3\n",
            "   - (a + b) * (c - d)\n",
            "   - sin(x) + cos(y)**2\n",
            "   - sqrt(x**2 + y**2)\n",
            "   - log(x) + exp(y/2)\n",
            "\n",
            "üå≥ Visualizador de √Årboles de Expresiones Matem√°ticas\n",
            "==================================================\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "VBox(children=(HTML(value='<h2>üå≥ Visualizador de √Årboles de Expresiones Matem√°ticas</h2>'), HTML(value='<p>Eje‚Ä¶"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "41f5aa82d3834e58bc1bc758c458c9c4"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Visualizador de √Årboles de Expresiones Matem√°ticas para Google Colab\n",
        "# Instalar dependencias necesarias\n",
        "\n",
        "!pip install matplotlib networkx sympy plotly ipywidgets\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import networkx as nx\n",
        "import sympy as sp\n",
        "from sympy.parsing.sympy_parser import parse_expr\n",
        "from sympy import symbols, sympify\n",
        "import plotly.graph_objects as go\n",
        "import plotly.offline as pyo\n",
        "from plotly.subplots import make_subplots\n",
        "import re\n",
        "from collections import deque\n",
        "import ipywidgets as widgets\n",
        "from IPython.display import display, HTML, clear_output\n",
        "\n",
        "class MathExpressionTreeVisualizer:\n",
        "    \"\"\"\n",
        "    Visualizador de √°rboles de expresiones matem√°ticas para Google Colab\n",
        "    \"\"\"\n",
        "\n",
        "    def __init__(self):\n",
        "        self.tree_data = None\n",
        "        self.node_positions = {}\n",
        "        self.node_labels = {}\n",
        "        self.edges = []\n",
        "\n",
        "    def parse_expression(self, expression_str):\n",
        "        \"\"\"\n",
        "        Parsea una expresi√≥n matem√°tica y crea el √°rbol sint√°ctico\n",
        "        \"\"\"\n",
        "        try:\n",
        "            # Limpiar la expresi√≥n\n",
        "            expression_str = expression_str.replace(' ', '')\n",
        "\n",
        "            # Parsear con SymPy\n",
        "            expr = parse_expr(expression_str, transformations='all')\n",
        "            return expr\n",
        "        except Exception as e:\n",
        "            raise ValueError(f\"Error al parsear la expresi√≥n: {str(e)}\")\n",
        "\n",
        "    def build_tree_from_sympy(self, expr):\n",
        "        \"\"\"\n",
        "        Construye el √°rbol desde una expresi√≥n de SymPy\n",
        "        \"\"\"\n",
        "        G = nx.DiGraph()\n",
        "        node_id = 0\n",
        "        node_labels = {}\n",
        "\n",
        "        def add_node_recursive(expr, parent_id=None):\n",
        "            nonlocal node_id\n",
        "            current_id = node_id\n",
        "            node_id += 1\n",
        "\n",
        "            # Determinar el tipo de nodo y su etiqueta\n",
        "            if expr.is_symbol:\n",
        "                label = str(expr)\n",
        "                node_type = 'variable'\n",
        "            elif expr.is_number:\n",
        "                label = str(expr)\n",
        "                node_type = 'number'\n",
        "            elif expr.is_Function:\n",
        "                label = expr.func.__name__\n",
        "                node_type = 'function'\n",
        "            else:\n",
        "                # Es un operador\n",
        "                if hasattr(expr, 'func'):\n",
        "                    op_name = expr.func.__name__\n",
        "                    if op_name == 'Add':\n",
        "                        label = '+'\n",
        "                    elif op_name == 'Mul':\n",
        "                        label = '√ó'\n",
        "                    elif op_name == 'Pow':\n",
        "                        label = '^'\n",
        "                    elif op_name == 'Div':\n",
        "                        label = '√∑'\n",
        "                    else:\n",
        "                        label = op_name\n",
        "                else:\n",
        "                    label = str(expr)\n",
        "                node_type = 'operator'\n",
        "\n",
        "            # Agregar nodo al grafo\n",
        "            G.add_node(current_id, label=label, type=node_type)\n",
        "            node_labels[current_id] = label\n",
        "\n",
        "            # Agregar arista al padre si existe\n",
        "            if parent_id is not None:\n",
        "                G.add_edge(parent_id, current_id)\n",
        "\n",
        "            # Procesar hijos recursivamente\n",
        "            if hasattr(expr, 'args') and expr.args:\n",
        "                for arg in expr.args:\n",
        "                    add_node_recursive(arg, current_id)\n",
        "\n",
        "            return current_id\n",
        "\n",
        "        root_id = add_node_recursive(expr)\n",
        "        return G, node_labels, root_id\n",
        "\n",
        "    def calculate_positions(self, G, root_id):\n",
        "        \"\"\"\n",
        "        Calcula las posiciones de los nodos para una mejor visualizaci√≥n\n",
        "        \"\"\"\n",
        "        try:\n",
        "            # Usar layout jer√°rquico de NetworkX\n",
        "            pos = nx.nx_agraph.graphviz_layout(G, prog='dot')\n",
        "        except:\n",
        "            # Fallback a layout de spring si graphviz no est√° disponible\n",
        "            pos = nx.spring_layout(G, k=3, iterations=50)\n",
        "\n",
        "        return pos\n",
        "\n",
        "    def visualize_with_matplotlib(self, expression_str):\n",
        "        \"\"\"\n",
        "        Visualiza el √°rbol usando Matplotlib\n",
        "        \"\"\"\n",
        "        try:\n",
        "            # Parsear expresi√≥n\n",
        "            expr = self.parse_expression(expression_str)\n",
        "\n",
        "            # Construir √°rbol\n",
        "            G, node_labels, root_id = self.build_tree_from_sympy(expr)\n",
        "\n",
        "            # Calcular posiciones\n",
        "            pos = self.calculate_positions(G, root_id)\n",
        "\n",
        "            # Crear figura\n",
        "            plt.figure(figsize=(12, 8))\n",
        "            plt.title(f'√Årbol de Expresi√≥n: {expression_str}', fontsize=16, fontweight='bold')\n",
        "\n",
        "            # Definir colores por tipo\n",
        "            colors = {\n",
        "                'operator': '#FF6B6B',\n",
        "                'function': '#4ECDC4',\n",
        "                'variable': '#45B7D1',\n",
        "                'number': '#96CEB4'\n",
        "            }\n",
        "\n",
        "            # Obtener colores de nodos\n",
        "            node_colors = []\n",
        "            for node_id in G.nodes():\n",
        "                node_type = G.nodes[node_id].get('type', 'operator')\n",
        "                node_colors.append(colors.get(node_type, '#CCCCCC'))\n",
        "\n",
        "            # Dibujar el grafo\n",
        "            nx.draw(G, pos,\n",
        "                   node_color=node_colors,\n",
        "                   node_size=2000,\n",
        "                   font_size=12,\n",
        "                   font_weight='bold',\n",
        "                   with_labels=False,\n",
        "                   arrows=True,\n",
        "                   arrowsize=20,\n",
        "                   edge_color='#666666',\n",
        "                   linewidths=2)\n",
        "\n",
        "            # Agregar etiquetas\n",
        "            nx.draw_networkx_labels(G, pos, node_labels, font_size=12, font_weight='bold')\n",
        "\n",
        "            # Agregar leyenda\n",
        "            legend_elements = [\n",
        "                plt.Rectangle((0,0),1,1, facecolor=colors['operator'], label='Operadores'),\n",
        "                plt.Rectangle((0,0),1,1, facecolor=colors['function'], label='Funciones'),\n",
        "                plt.Rectangle((0,0),1,1, facecolor=colors['variable'], label='Variables'),\n",
        "                plt.Rectangle((0,0),1,1, facecolor=colors['number'], label='N√∫meros')\n",
        "            ]\n",
        "            plt.legend(handles=legend_elements, loc='upper right')\n",
        "\n",
        "            plt.axis('off')\n",
        "            plt.tight_layout()\n",
        "            plt.show()\n",
        "\n",
        "        except Exception as e:\n",
        "            print(f\"Error: {str(e)}\")\n",
        "\n",
        "    def visualize_with_plotly(self, expression_str):\n",
        "        \"\"\"\n",
        "        Visualiza el √°rbol usando Plotly (m√°s interactivo)\n",
        "        \"\"\"\n",
        "        try:\n",
        "            # Parsear expresi√≥n\n",
        "            expr = self.parse_expression(expression_str)\n",
        "\n",
        "            # Construir √°rbol\n",
        "            G, node_labels, root_id = self.build_tree_from_sympy(expr)\n",
        "\n",
        "            # Calcular posiciones\n",
        "            pos = self.calculate_positions(G, root_id)\n",
        "\n",
        "            # Preparar datos para Plotly\n",
        "            edge_x = []\n",
        "            edge_y = []\n",
        "            for edge in G.edges():\n",
        "                x0, y0 = pos[edge[0]]\n",
        "                x1, y1 = pos[edge[1]]\n",
        "                edge_x.extend([x0, x1, None])\n",
        "                edge_y.extend([y0, y1, None])\n",
        "\n",
        "            # Crear trazas de aristas\n",
        "            edge_trace = go.Scatter(x=edge_x, y=edge_y,\n",
        "                                  line=dict(width=3, color='#888'),\n",
        "                                  hoverinfo='none',\n",
        "                                  mode='lines')\n",
        "\n",
        "            # Preparar datos de nodos\n",
        "            node_x = []\n",
        "            node_y = []\n",
        "            node_text = []\n",
        "            node_colors = []\n",
        "            node_info = []\n",
        "\n",
        "            color_map = {\n",
        "                'operator': '#FF6B6B',\n",
        "                'function': '#4ECDC4',\n",
        "                'variable': '#45B7D1',\n",
        "                'number': '#96CEB4'\n",
        "            }\n",
        "\n",
        "            for node_id in G.nodes():\n",
        "                x, y = pos[node_id]\n",
        "                node_x.append(x)\n",
        "                node_y.append(y)\n",
        "\n",
        "                label = node_labels[node_id]\n",
        "                node_type = G.nodes[node_id].get('type', 'operator')\n",
        "\n",
        "                node_text.append(label)\n",
        "                node_colors.append(color_map.get(node_type, '#CCCCCC'))\n",
        "                node_info.append(f'Tipo: {node_type}<br>Valor: {label}')\n",
        "\n",
        "            # Crear traza de nodos\n",
        "            node_trace = go.Scatter(x=node_x, y=node_y,\n",
        "                                  mode='markers+text',\n",
        "                                  hoverinfo='text',\n",
        "                                  text=node_text,\n",
        "                                  textposition=\"middle center\",\n",
        "                                  hovertext=node_info,\n",
        "                                  marker=dict(size=30,\n",
        "                                            color=node_colors,\n",
        "                                            line=dict(width=2, color='white')))\n",
        "\n",
        "            # Crear figura\n",
        "            fig = go.Figure()\n",
        "            fig.add_trace(edge_trace)\n",
        "            fig.add_trace(node_trace)\n",
        "\n",
        "            fig.update_layout(\n",
        "                title=f'√Årbol de Expresi√≥n Interactivo: {expression_str}',\n",
        "                titlefont_size=16,\n",
        "                showlegend=False,\n",
        "                hovermode='closest',\n",
        "                margin=dict(b=20,l=5,r=5,t=40),\n",
        "                annotations=[ dict(\n",
        "                    text=\"Pasa el cursor sobre los nodos para m√°s informaci√≥n\",\n",
        "                    showarrow=False,\n",
        "                    xref=\"paper\", yref=\"paper\",\n",
        "                    x=0.005, y=-0.002,\n",
        "                    xanchor='left', yanchor='bottom',\n",
        "                    font=dict(color=\"gray\", size=12)\n",
        "                )],\n",
        "                xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n",
        "                yaxis=dict(showgrid=False, zeroline=False, showticklabels=False)\n",
        "            )\n",
        "\n",
        "            fig.show()\n",
        "\n",
        "        except Exception as e:\n",
        "            print(f\"Error: {str(e)}\")\n",
        "\n",
        "    def create_interactive_widget(self):\n",
        "        \"\"\"\n",
        "        Crea un widget interactivo para ingresar expresiones\n",
        "        \"\"\"\n",
        "        # Widget de entrada de texto\n",
        "        expression_input = widgets.Text(\n",
        "            value='2*x + 3',\n",
        "            placeholder='Ingresa una expresi√≥n matem√°tica',\n",
        "            description='Expresi√≥n:',\n",
        "            style={'description_width': 'initial'},\n",
        "            layout=widgets.Layout(width='400px')\n",
        "        )\n",
        "\n",
        "        # Botones de ejemplo\n",
        "        examples = [\n",
        "            '2*x + 3',\n",
        "            '(a + b) * (c - d)',\n",
        "            'sin(x) + cos(y)',\n",
        "            'x**2 + 2*x + 1',\n",
        "            'sqrt(a**2 + b**2)',\n",
        "            'log(x) + exp(y)',\n",
        "            '(x + 1) / (x - 1)'\n",
        "        ]\n",
        "\n",
        "        example_buttons = []\n",
        "        for example in examples:\n",
        "            btn = widgets.Button(\n",
        "                description=example,\n",
        "                layout=widgets.Layout(width='150px', margin='2px')\n",
        "            )\n",
        "\n",
        "            def on_example_click(b, expr=example):\n",
        "                expression_input.value = expr\n",
        "\n",
        "            btn.on_click(on_example_click)\n",
        "            example_buttons.append(btn)\n",
        "\n",
        "        # Bot√≥n de visualizaci√≥n\n",
        "        visualize_btn = widgets.Button(\n",
        "            description='Visualizar √Årbol',\n",
        "            button_style='primary',\n",
        "            layout=widgets.Layout(width='200px')\n",
        "        )\n",
        "\n",
        "        # Selector de tipo de visualizaci√≥n\n",
        "        viz_type = widgets.Dropdown(\n",
        "            options=[('Matplotlib', 'matplotlib'), ('Plotly Interactivo', 'plotly')],\n",
        "            value='plotly',\n",
        "            description='Tipo:',\n",
        "            style={'description_width': 'initial'}\n",
        "        )\n",
        "\n",
        "        # Output area\n",
        "        output = widgets.Output()\n",
        "\n",
        "        def on_visualize_click(b):\n",
        "            with output:\n",
        "                clear_output(wait=True)\n",
        "                expr = expression_input.value.strip()\n",
        "                if not expr:\n",
        "                    print(\"Por favor ingresa una expresi√≥n matem√°tica\")\n",
        "                    return\n",
        "\n",
        "                try:\n",
        "                    if viz_type.value == 'matplotlib':\n",
        "                        self.visualize_with_matplotlib(expr)\n",
        "                    else:\n",
        "                        self.visualize_with_plotly(expr)\n",
        "                except Exception as e:\n",
        "                    print(f\"Error: {str(e)}\")\n",
        "\n",
        "        visualize_btn.on_click(on_visualize_click)\n",
        "\n",
        "        # Layout\n",
        "        examples_box = widgets.HBox(example_buttons[:4])\n",
        "        examples_box2 = widgets.HBox(example_buttons[4:])\n",
        "        controls = widgets.HBox([expression_input, viz_type, visualize_btn])\n",
        "\n",
        "        ui = widgets.VBox([\n",
        "            widgets.HTML(\"<h2>üå≥ Visualizador de √Årboles de Expresiones Matem√°ticas</h2>\"),\n",
        "            widgets.HTML(\"<p>Ejemplos r√°pidos:</p>\"),\n",
        "            examples_box,\n",
        "            examples_box2,\n",
        "            widgets.HTML(\"<br><p>O ingresa tu propia expresi√≥n:</p>\"),\n",
        "            controls,\n",
        "            output\n",
        "        ])\n",
        "\n",
        "        return ui\n",
        "\n",
        "# Funci√≥n principal para usar en Colab\n",
        "def crear_visualizador():\n",
        "    \"\"\"\n",
        "    Funci√≥n principal para crear el visualizador en Google Colab\n",
        "    \"\"\"\n",
        "    print(\"üå≥ Visualizador de √Årboles de Expresiones Matem√°ticas\")\n",
        "    print(\"=\" * 50)\n",
        "\n",
        "    visualizer = MathExpressionTreeVisualizer()\n",
        "    widget = visualizer.create_interactive_widget()\n",
        "    display(widget)\n",
        "\n",
        "    return visualizer\n",
        "\n",
        "# Funciones de conveniencia\n",
        "def visualizar_expresion(expresion, tipo='plotly'):\n",
        "    \"\"\"\n",
        "    Funci√≥n r√°pida para visualizar una expresi√≥n\n",
        "\n",
        "    Args:\n",
        "        expresion (str): La expresi√≥n matem√°tica a visualizar\n",
        "        tipo (str): 'matplotlib' o 'plotly'\n",
        "    \"\"\"\n",
        "    visualizer = MathExpressionTreeVisualizer()\n",
        "\n",
        "    if tipo == 'matplotlib':\n",
        "        visualizer.visualize_with_matplotlib(expresion)\n",
        "    else:\n",
        "        visualizer.visualize_with_plotly(expresion)\n",
        "\n",
        "def ejemplos_de_uso():\n",
        "    \"\"\"\n",
        "    Muestra ejemplos de c√≥mo usar el visualizador\n",
        "    \"\"\"\n",
        "    print(\"üìö Ejemplos de uso:\")\n",
        "    print(\"=\" * 30)\n",
        "\n",
        "    # Crear visualizador\n",
        "    visualizer = MathExpressionTreeVisualizer()\n",
        "\n",
        "    ejemplos = [\n",
        "        \"2*x + 3\",\n",
        "        \"(a + b) * (c - d)\",\n",
        "        \"sin(x) + cos(y)**2\",\n",
        "        \"sqrt(x**2 + y**2)\"\n",
        "    ]\n",
        "\n",
        "    for i, expr in enumerate(ejemplos, 1):\n",
        "        print(f\"\\n{i}. Expresi√≥n: {expr}\")\n",
        "        try:\n",
        "            # Solo mostrar con matplotlib para los ejemplos\n",
        "            visualizer.visualize_with_matplotlib(expr)\n",
        "        except Exception as e:\n",
        "            print(f\"   Error: {e}\")\n",
        "\n",
        "# Instrucciones de uso\n",
        "print(\"\"\"\n",
        "üöÄ INSTRUCCIONES DE USO:\n",
        "\n",
        "1. Ejecuta todas las celdas de este notebook\n",
        "2. Usa cualquiera de estas opciones:\n",
        "\n",
        "   # Opci√≥n 1: Interfaz interactiva completa\n",
        "   visualizador = crear_visualizador()\n",
        "\n",
        "   # Opci√≥n 2: Visualizaci√≥n r√°pida\n",
        "   visualizar_expresion(\"2*x + 3\", tipo='plotly')\n",
        "\n",
        "   # Opci√≥n 3: Ver ejemplos\n",
        "   ejemplos_de_uso()\n",
        "\n",
        "üìù EXPRESIONES SOPORTADAS:\n",
        "   - Operadores: +, -, *, /, ** (potencia)\n",
        "   - Funciones: sin, cos, tan, log, ln, sqrt, exp\n",
        "   - Variables: x, y, a, b, etc.\n",
        "   - Par√©ntesis para agrupaci√≥n\n",
        "   - N√∫meros enteros y decimales\n",
        "\n",
        "üí° EJEMPLOS:\n",
        "   - 2*x + 3\n",
        "   - (a + b) * (c - d)\n",
        "   - sin(x) + cos(y)**2\n",
        "   - sqrt(x**2 + y**2)\n",
        "   - log(x) + exp(y/2)\n",
        "\"\"\")\n",
        "\n",
        "# Ejecutar autom√°ticamente la interfaz interactiva\n",
        "if __name__ == \"__main__\":\n",
        "    crear_visualizador()"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "H9SB5Zwk5oYt"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}